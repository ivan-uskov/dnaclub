<?php

namespace AppBundle\Entity\Repository;

use AppBundle\config\SubscriptionType;
use AppBundle\Entity\Client;
use Doctrine\ORM\EntityRepository;
use AppBundle\utils\DateUtils;

/**
 * MarketingReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class MarketingReportRepository extends EntityRepository
{
    public function getMonthsForSelect()
    {
        $dates = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('DISTINCT r.date')
            ->from('AppBundle\Entity\MarketingReport', 'r')
            ->orderBy('r.date', 'desc')
            ->getQuery()
            ->getResult();

        return DateUtils::getMonthsSelectFromTimestamp($dates);
    }

    public function findByDate($date)
    {
        $em = $this->getEntityManager();
        $reportRows = $em->createQueryBuilder()
            ->select('r')
            ->from('AppBundle\Entity\MarketingReport', 'r')
            ->where('r.date = :date')
            ->setParameter('date', $date)
            ->orderBy('r.orderSum + r.startSum', 'desc')
            ->getQuery()
            ->getResult();

        return $this->prepareReportRows($date, $reportRows);
    }

    private function prepareReportRows($date, $reportRows)
    {
        $useActualData = $date == (new \DateTime())->format('Y-m-01');

        $result = $this->initReportRows($reportRows, $useActualData);

        if ($useActualData)
        {
            $this->fillReportWithActualData($result, $date);
        }

        $this->calculateRowSumValues($result);
        return $result;
    }

    private function initReportRows(&$reportRows, $useActualData)
    {
        $result = array();
        foreach($reportRows as $reportRow)
        {
            $client = $reportRow->getClient();
            $clientId = $client->getClientId();
            $clientName = $client->getFullName();
            $startSum = $reportRow->getStartSum();

            if ($useActualData)
            {
                $result[$clientId] = array(
                    'name'       => $clientName,
                    'startSum'   => $startSum,
                    'orderSum'   => 0,
                    'releaseSum' => 0,
                    'subscrSum'  => 0,
                    'subscrInfo' => '',
                    'endSum'     => 0
                );
            }
            else
            {
                $result[$client->getClientId()] = array(
                    'name' => $clientName,
                    'startSum' => $startSum,
                    'orderSum' => $reportRow->getOrderSum(),
                    'releaseSum' => 0,
                    'subscrSum'  => $reportRow->getContractSum() + $reportRow->getMaintenanceSum(),
                    'subscrInfo' => $reportRow->getSubscriptionsInfo(),
                    'endSum' => 0
                );
            }
        }

        return $result;
    }

    private function fillReportWithActualData(&$result, $date)
    {
        $em = $this->getEntityManager();
        $orderSums = $em->getRepository('AppBundle:Order')->findByMonth($date);
        foreach($orderSums as $order)
        {
            $clientId = $order['clientId'];
            $client = $em->getRepository('AppBundle:Client')->find($clientId);
            $orderSum = (double)$order['orderSum'];

            if (!array_key_exists($clientId, $result))
            {
                $result[$clientId] = array(
                    'name'       => $client->getFullName(),
                    'startSum'   => 0,
                    'orderSum'   => 0,
                    'releaseSum' => 0,
                    'subscrSum'  => 0,
                    'subscrInfo' => '',
                    'endSum'     => 0
                );
            }

            $result[$clientId]['orderSum'] = $orderSum;
        }

        $subscriptionSums = $this->getEntityManager()->getRepository('AppBundle:Subscription')->findByMonthGroupedByClient($date);
        foreach($subscriptionSums as $subscription)
        {
            $clientId = $subscription['clientId'];
            $result[$clientId]['subscrSum'] = (double)$subscription['contractSum'] + (double)$subscription['maintenanceSum'];
            $result[$clientId]['subscrInfo'] = SubscriptionType::formatSubscriptionInfo($subscription['contractCnt'], $subscription['maintenanceCnt']);
        }
    }

    private function calculateRowSumValues(&$result)
    {
        foreach ($result as &$row)
        {
            $row['releaseSum'] = $row['startSum'] +  $row['orderSum'];
            $row['endSum'] = $row['releaseSum'] - $row['subscrSum'];
        }
    }
}
