<?php

namespace AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\utils\DateUtils;

/**
 * RewardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RewardRepository extends EntityRepository
{
    public function findNotDeletedByClient($client = null, $excludeUsed = false)
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from('AppBundle\Entity\Reward', 'r')
            ->where('r.isDeleted = 0')
            ->orderBy('r.remainingSum', 'desc');

        if ($excludeUsed)
        {
            $result->andWhere('r.remainingSum > 0');
        }

        if ($client != null)
        {
            $result
                ->andWhere('r.client = :client_id')
                ->setParameter('client_id', $client->getClientId());
        }

        $result = $result->getQuery()->getResult();

        return $result;
    }

    public function findByMonth($date)
    {
        $startDate = DateUtils::getFirstDayOfThisMonth($date);
        $endDate = DateUtils::getFirstDayOfNextMonth($date);

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from('AppBundle\Entity\Reward', 'r')
            ->where('r.date >= :start_date')
            ->andWhere('r.date < :end_date')
            ->andWhere('r.isDeleted = 0')
            ->setParameter('start_date', $startDate)
            ->setParameter('end_date', $endDate)
            ->orderBy('r.remainingSum', 'desc')
            ->getQuery()
            ->getResult();
    }

    public function getMonthsForSelect()
    {
        $dates = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('DISTINCT r.date')
            ->from('AppBundle\Entity\Reward', 'r')
            ->where('r.isDeleted = 0')
            ->orderBy('r.date', 'desc')
            ->getQuery()
            ->getResult();

        return DateUtils::getMonthsSelectFromTimestamp($dates);
    }
}
